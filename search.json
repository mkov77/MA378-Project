[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Math 378 Final project",
    "section": "",
    "text": "Hi there, itâ€™s Michaela Kovalsky! Welcome to my Math 378 Final Project.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "content/model.html",
    "href": "content/model.html",
    "title": "Model",
    "section": "",
    "text": "Code\nlibrary(reticulate)\nCode\nfrom palmerpenguins import penguins\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing",
    "crumbs": [
      "Model"
    ]
  },
  {
    "objectID": "content/model.html#get-data",
    "href": "content/model.html#get-data",
    "title": "Model",
    "section": "Get Data",
    "text": "Get Data\n\n\nCode\nimport duckdb\nimport pandas as pd\nfrom palmerpenguins import load_penguins\n\ndf_penguins = load_penguins()\n\nwith duckdb.connect('my-db.duckdb') as con:\n    con.register('penguins', df_penguins)\n    df = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()\n\n\n&lt;duckdb.duckdb.DuckDBPyConnection object at 0x000001973AD22730&gt;\n\n\nCode\nprint(df.head(3))\n\n\n  species     island  bill_length_mm  ...  body_mass_g     sex  year\n0  Adelie  Torgersen            39.1  ...       3750.0    male  2007\n1  Adelie  Torgersen            39.5  ...       3800.0  female  2007\n2  Adelie  Torgersen            40.3  ...       3250.0  female  2007\n\n[3 rows x 8 columns]",
    "crumbs": [
      "Model"
    ]
  },
  {
    "objectID": "content/model.html#define-model-and-fit",
    "href": "content/model.html#define-model-and-fit",
    "title": "Model",
    "section": "Define Model and Fit",
    "text": "Define Model and Fit\n\n\nCode\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)",
    "crumbs": [
      "Model"
    ]
  },
  {
    "objectID": "content/model.html#get-some-information",
    "href": "content/model.html#get-some-information",
    "title": "Model",
    "section": "Get some information",
    "text": "Get some information\n\n\nCode\nprint(f\"R^2 {model.score(X,y)}\")\n\n\nR^2 0.8555368759537614\n\n\nCode\nprint(f\"Intercept {model.intercept_}\")\n\n\nIntercept 2169.269720939398\n\n\nCode\nprint(f\"Columns {X.columns}\")\n\n\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\n\n\nCode\nprint(f\"Coefficients {model.coef_}\")\n\n\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]\n\n\n\n\nCode\nfrom vetiver import VetiverModel\nv = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)\n\n\n\n\nCode\nfrom pins import board_folder\nfrom vetiver import vetiver_pin_write\nb = board_folder('data/model', allow_pickle_read = True)\nvetiver_pin_write(b, v)\n\n\nModel Cards provide a framework for transparent, responsible reporting. \n Use the vetiver `.qmd` Quarto template as a place to start, \n with vetiver.model_card()\nWriting pin:\nName: 'penguin_model'\nVersion: 20240425T202514Z-a6f9b\n\n\n\n\nCode\nfrom vetiver import VetiverAPI\napp = VetiverAPI(v, check_prototype = True)\n\n\n\n\nCode\n#from vetiver import prepare_docker\n#prepare_docker(b, 'penguin_model')\n\n\n\n\nCode\n#import requests\n\n#req_data = {\n # \"bill_length_mm\": 0,\n#  \"species_Chinstrap\": False,\n # \"species_Gentoo\": False,\n#  \"sex_male\": False\n#}\n#req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])\n#res = req.json().get('predict')[0]\n#print(res)\n\n\n\n\nCode\n#library(httr2)\n#req &lt;- httr2::request(\"http://127.0.0.1:8080/predict\") |&gt;\n # httr2::req_body_json(\n  #  list(\n   #   list(\n    #    \"bill_length_mm\" = 0,\n     #   \"species_Chinstrap\" = FALSE,\n      #  \"species_Gentoo\" = FALSE,\n       # \"sex_male\" = FALSE\n      #)\n    #)\n  #) |&gt;\n  #httr2::req_perform()\n#res &lt;- httr2::resp_body_json(req)$predict[[1]]\n#res\n\n\n\n\nCode\ncon.close()",
    "crumbs": [
      "Model"
    ]
  },
  {
    "objectID": "content/code.html",
    "href": "content/code.html",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nsuppressPackageStartupMessages({\nlibrary(palmerpenguins)\nlibrary(dplyr)\nlibrary(dbplyr)\nlibrary(ggplot2) \nlibrary(DBI)\nlibrary(duckdb)\n})\n\nif (exists(\"con\")) {\n  DBI::dbDisconnect(con)\n}\n\ncon &lt;- DBI::dbConnect(\n  duckdb::duckdb(), \n  dbdir = \"my-db.duckdb\"\n  )\ndf &lt;- dplyr::tbl(con, \"penguins\")\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n        ends_with(\"mm\") | ends_with(\"g\"),\n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  dplyr::collect() %&gt;%\n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836",
    "crumbs": [
      "Penguins EDA"
    ]
  },
  {
    "objectID": "content/code.html#penguin-size-and-mass-by-sex-and-species",
    "href": "content/code.html#penguin-size-and-mass-by-sex-and-species",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nsuppressPackageStartupMessages({\nlibrary(palmerpenguins)\nlibrary(dplyr)\nlibrary(dbplyr)\nlibrary(ggplot2) \nlibrary(DBI)\nlibrary(duckdb)\n})\n\nif (exists(\"con\")) {\n  DBI::dbDisconnect(con)\n}\n\ncon &lt;- DBI::dbConnect(\n  duckdb::duckdb(), \n  dbdir = \"my-db.duckdb\"\n  )\ndf &lt;- dplyr::tbl(con, \"penguins\")\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n        ends_with(\"mm\") | ends_with(\"g\"),\n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  dplyr::collect() %&gt;%\n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836",
    "crumbs": [
      "Penguins EDA"
    ]
  },
  {
    "objectID": "content/code.html#penguin-size-vs-mass-by-species",
    "href": "content/code.html#penguin-size-vs-mass-by-species",
    "title": "Penguins EDA",
    "section": "Penguin Size vs Mass by Species",
    "text": "Penguin Size vs Mass by Species\n\n\nCode\ndf %&gt;%\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nDBI::dbDisconnect(con)",
    "crumbs": [
      "Penguins EDA"
    ]
  },
  {
    "objectID": "content/rmarkdown.html",
    "href": "content/rmarkdown.html",
    "title": "R Markdown",
    "section": "",
    "text": "You can include R Markdown files in your project."
  },
  {
    "objectID": "content/rmarkdown.html#r-markdown",
    "href": "content/rmarkdown.html#r-markdown",
    "title": "R Markdown",
    "section": "R Markdown",
    "text": "R Markdown\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00"
  },
  {
    "objectID": "content/rmarkdown.html#including-plots",
    "href": "content/rmarkdown.html#including-plots",
    "title": "R Markdown",
    "section": "Including Plots",
    "text": "Including Plots\nYou can also embed plots, for example:\n\n\n\n\n\n\n\n\n\nNote that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot."
  }
]